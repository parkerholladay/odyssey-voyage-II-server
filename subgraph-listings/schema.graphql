extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0",
        import: ["@key", "@shareable"])
        
type Query {
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]!
  "Return the listings that belong to the currently logged-in host"
  hostListings: [Listing]!
  "Returns the details about this listing"
  listing(id: ID!): Listing
  "Returns all possible amenities for a listing"
  listingAmenities: [Amenity!]!
}

type Mutation {
  "Creates a new listing for the currently authenticated host"
  createListing(listing: CreateListingInput!): CreateListingResponse!
  "Updates an existing listing"
  updateListing(listingId: ID!, listing: UpdateListingInput!): UpdateListingResponse!
}

"A listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value."
type Listing @key(fields: "id") {
  id: ID!
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The thumbnail image for the listing"
  photoThumbnail: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "The location type of the listing"
  locationType: LocationType!
  "Owner of the listing"
  host: Host!
  "The amenities available for this listing"
  amenities: [Amenity]!
  "Calculated total cost of the listing with the given arguments"
  totalCost(checkInDate: String!, checkOutDate: String!): Float!
}

"What the location provides. An amenity should be tied to a specific category."
type Amenity {
  id: ID!
  "The category for the amenity"
  category: AmenityCategory!
  "The name of the amenity. Should be short."
  name: String!
}

"The category an amenity belongs to."
enum AmenityCategory {
  ACCOMMODATION_DETAILS
  SPACE_SURVIVAL
  OUTDOORS
}

"A listing can be one of these types."
enum LocationType {
  SPACESHIP
  HOUSE
  CAMPSITE
  APARTMENT
  ROOM
}

"Used to create a listing"
input CreateListingInput {
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The thumbnail image for the listing"
  photoThumbnail: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "The location type of the listing"
  locationType: LocationType!
  "The Listing's amenities "
  amenities: [ID!]!
}

"Updates the properties included. If none are given, don't update anything"
input UpdateListingInput {
  "The listing's title"
  title: String
  "The listing's description"
  description: String
  "The thumbnail image for the listing"
  photoThumbnail: String
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "The location type of the listing"
  locationType: LocationType
  "The Listing's amenities "
  amenities: [ID]
}

"Response after creating a listing"
type CreateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly created listing"
  listing: Listing
}

"Response after updating a listing"
type UpdateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly updated listing"
  listing: Listing
}

type Host @key(fields: "id") {
  id: ID!
}

type Booking @key(fields: "id") {
  id: ID!
  "The listing associated with the reservation"
  listing: Listing! @shareable
}

### COPIED FROM MONOLITH
interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}
